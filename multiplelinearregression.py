# -*- coding: utf-8 -*-
"""multipleLinearRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YMqOkHC5nr6SMY1h6yhp-PmQB2LmgqNb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("mlr.csv")

df1 = df.to_numpy()
#print(df1)

X_train = df1[:, 0:2]
#print(X_train)

y_train = df1[:, 2]
y_train1 = y_train
y_train = y_train.reshape((-1, 1))
#print(y_train)

def gradient(X, y, W, b):
  m, n = X.shape
  dj_dw = np.zeros(n)
  dj_db = 0
  for i in range(m):
    diff = (np.dot(X[i], W) + b) - y[i]
    for j in range(n):
      dj_dw[j] += diff * X[i, j]
    dj_db += diff
  dj_dw = dj_dw / m
  dj_db = dj_db / m
  return dj_dw, dj_db

def grad_descent(X, y, W_in, b_in, alpha, iters):
  W = W_in
  b = b_in
  for i in range(iters):
    dj_dw, dj_db = gradient(X, y, W, b)
    W -= alpha * dj_dw
    b -= alpha * dj_db
  return [W[0], W[1]], [b[0]]

W, b = grad_descent(X_train, y_train, [1, 1], 1, 0.0001, 1000)
for i in range(X_train.shape[0]):
  print(i, np.dot(W, X_train[i]) + b, y_train[i])

fig = plt.figure()
ax = plt.axes(projection = "3d")
ax.scatter3D(X_train[:, 0], X_train[:, 1], y_train1)